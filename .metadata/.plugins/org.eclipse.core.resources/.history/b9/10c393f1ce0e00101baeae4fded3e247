package com.kbo.project.user.controller;


import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.web.bind.annotation.*;

import org.springframework.security.core.Authentication;
import com.kbo.project.jwt.auth.JwtUtil;
import com.kbo.project.user.dto.UserDto;
import com.kbo.project.user.service.UserService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/api")
public class UserController {
	@Autowired
	UserService userService;
	
	AuthenticationManager authenticationManager;
    JwtUtil jwtUtil;
    
    @Autowired
    public AuthController(AuthenticationManager authenticationManager, JwtUtil jwtUtil) {
        this.authenticationManager = authenticationManager;
        this.jwtUtil = jwtUtil;
    }

    @PostMapping
    public String login(@RequestBody LoginRequest loginRequest) {
        Authentication authentication = authenticationManager.authenticate(
                new UsernamePasswordAuthenticationToken(loginRequest.getUsername(), loginRequest.getPassword())
        );
        return jwtUtil.generateToken(authentication.getName());
    }

    public static class LoginRequest {
        private String username;
        private String password;

        // Getters and Setters
    }
    
	@GetMapping("/user/idCheck")
	public ResponseEntity<?> existIdCheck(@RequestParam("id") String id) {
		try {
			boolean existId = userService.existIdCheck(id);
			return new ResponseEntity<>(existId, HttpStatus.OK);
		} catch(Exception e) {
			System.out.println(e);
			return new ResponseEntity<>("실패", HttpStatus.BAD_REQUEST);
		}
	}
	
    @PostMapping("/user/signup")
    public ResponseEntity<String> signup(@Valid @RequestBody UserDto userDto) {
        try {
        	userService.userSignUp(userDto);
            return new ResponseEntity<>(null, HttpStatus.OK);
        } catch(Exception e) {
        	System.out.println(e);
        	return new ResponseEntity<>("실패", HttpStatus.BAD_REQUEST);
        }

    }
}
