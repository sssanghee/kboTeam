package com.kbo.project.user.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.kbo.project.user.domain.UserInfo;
import com.kbo.project.user.dto.UserDto;
import com.kbo.project.user.repository.UserRepository;
import com.kbo.project.common.*;

@Service
public class UserService {
	
	@Autowired
	UserRepository userRepository;
	
	@Autowired
    PasswordEncoder passwordEncoder;

	public boolean existIdCheck(String id) {
		boolean existId = userRepository.existsById(id);
		return existId;
	}
	
    public void userSignUp(UserDto userDto) {
        UserInfo user = new UserInfo();
        String dateFormat = CommonUtils.getNow();
        
        user.setUserId(userDto.getUserId());
        user.setUserName(userDto.getUserName());
        user.setPassword(passwordEncoder.encode(userDto.getPassword()));
        user.setMateStat("1");
        user.setFrsRgtDtm(dateFormat);
        user.setLstAltDtm(dateFormat);
        
		userRepository.save(user);
    }
    
    
//    @Transactional
//    public User signup(UserDto userDto) {
//        if (userRepository.findOneWithAuthoritiesByUsername(userDto.getUsername()).orElse(null) != null) {
//            throw new RuntimeException("이미 가입되어 있는 유저입니다.");
//        }
//
//        // 가입되어 있지 않은 회원이면,
//        // 권한 정보 만들고
//        Authority authority = Authority.builder()
//                .authorityName("ROLE_USER")
//                .build();
//
//        // 유저 정보를 만들어서 save
//        User user = User.builder()
//                .username(userDto.getUsername())
//                .password(passwordEncoder.encode(userDto.getPassword()))
//                .nickname(userDto.getNickname())
//                .authorities(Collections.singleton(authority))
//                .activated(true)
//                .build();
//
//        return userRepository.save(user);
//    }
//
//    // 유저,권한 정보를 가져오는 메소드
//    @Transactional(readOnly = true)
//    public Optional<User> getUserWithAuthorities(String username) {
//        return userRepository.findOneWithAuthoritiesByUsername(username);
//    }
//
//    // 현재 securityContext에 저장된 username의 정보만 가져오는 메소드
//    @Transactional(readOnly = true)
//    public Optional<User> getMyUserWithAuthorities() {
//        return SecurityUtil.getCurrentUsername()
//                .flatMap(userRepository::findOneWithAuthoritiesByUsername);
//    }
}
