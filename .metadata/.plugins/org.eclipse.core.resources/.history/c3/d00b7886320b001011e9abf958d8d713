package com.kbo.project.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.security.web.util.matcher.AntPathRequestMatcher;
import org.springframework.security.web.header.writers.frameoptions.XFrameOptionsHeaderWriter;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
	
	@SuppressWarnings("removal")
	@Bean
    SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
//        http
//            .authorizeHttpRequests((authorizeHttpRequests) -> authorizeHttpRequests
//                .requestMatchers(new AntPathRequestMatcher("/**")).permitAll())
//            .csrf((csrf) -> csrf
//                    .disable())//ignoringRequestMatchers(new AntPathRequestMatcher("/h2-console/**"))
//            .headers((headers) -> headers
//                    .addHeaderWriter(new XFrameOptionsHeaderWriter(
//                        XFrameOptionsHeaderWriter.XFrameOptionsMode.SAMEORIGIN)))
//
//        ;
//        
//        return http.build();
	    http
				.formLogin(f->f.disable()) // FormLogin 사용 X
	            .httpBasic(h -> h.disable()) //HTTP 기본 인증을 비활성화
	            .cors(corsCustomizer -> corsCustomizer.configurationSource(new CorsConfigurationSource() {
	            @Override
	            public CorsConfiguration getCorsConfiguration(HttpServletRequest request) {
	                CorsConfiguration config = new CorsConfiguration();
	                config.setAllowedOrigins(Collections.singletonList("*")); //(수정예정)CORS를 허용할 프론트 도메인을 적을 곳
	                config.setAllowedMethods(Collections.singletonList("*"));
	                config.setAllowCredentials(true);
	                config.setAllowedHeaders(Collections.singletonList("*"));
	                config.setMaxAge(3600L); //1시간
	                return config;
	                }
	             }))
	            .csrf(AbstractHttpConfigurer::disable) //CSRF 보호 기능 비활성화
	            .sessionManagement((sessionManagement) ->
	                        sessionManagement.sessionCreationPolicy(SessionCreationPolicy.STATELESS)
	            ) //세션관리 정책을 STATELESS(세션이 있으면 쓰지도 않고, 없으면 만들지도 않는다)
	            .authorizeHttpRequests(auth -> auth
	                     .requestMatchers("/token/**").permitAll() //토큰 발급을 위한 경로는 모두 허용
	                     // 아이콘, css, js 관련
	                     // 기본 페이지, css, image, js 하위 폴더에 있는 자료들은 모두 접근 가능
	                     .requestMatchers("/","/css/**","/images/**","/js/**","/favicon.ico").permitAll()
	                     .requestMatchers("/sign-up").authenticated() // 로그인 접근 가능
	                     .anyRequest().authenticated()) // 위의 경로 이외에는 모두 인증된 사용자만 접근 가능
	            .headers((headers) -> headers.frameOptions(HeadersConfigurer.FrameOptionsConfig::disable))
	            .oauth2Login((oauth2) -> oauth2 // OAuth2 로그인 설정시작
	                   .userInfoEndpoint(userInfoEndpoint -> userInfoEndpoint
	                           .userService(customOAuth2UserService)) //OAuth 로그인 시 사용자 정보를 가져오는 엔드포인트와 사용자 서비스를 설정
	                   .failureHandler(oAuth2LoginFailureHandler)
	                   .successHandler(oAuth2LoginSuccessHandler));


	        // 원래 스프링 시큐리티 필터 순서가 LogoutFilter 이후에 로그인 필터 동작
	        // 따라서, LogoutFilter 이후에 우리가 만든 필터 동작하도록 설정
	        // 순서 : LogoutFilter -> JwtAuthenticationProcessingFilter -> CustomJsonUsernamePasswordAuthenticationFilter
	        http.addFilterAfter(customJsonUsernamePasswordAuthenticationFilter(), LogoutFilter.class);
	        http.addFilterBefore(jwtAuthenticationProcessingFilter(), CustomJsonUsernamePasswordAuthenticationFilter.class);
	        
	        return http.build();
    }
    
    @Bean
    PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}